#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
GUI module generated by PAGE version 6.2 in conjunction with Tcl version 8.6
Created Thuesday November 23 09:44:23 pm CET 2021
platform: Windows NT

@author: OJEIMI_HAJJAR
"""

# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
# ----------------<Importing the necessary libraries>----------------
# -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

import socket
from tabnanny import verbose
import tkinter
from tkinter import *
from PIL import ImageTk, Image 
from tkinter import messagebox
from scapy.all import *

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import interfacetcl_support


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    interfacetcl_support.set_Tk_var()
    top = Toplevel1 (root)
    interfacetcl_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    interfacetcl_support.set_Tk_var()
    top = Toplevel1 (w)
    interfacetcl_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None



class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1471x723+44+137")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("Hello Scapattackers!")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.026, rely=0.089, relheight=0.599
                , relwidth=0.504)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#ffffff")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Frame2 = tk.Frame(self.Frame1)
        self.Frame2.place(relx=-0.013, rely=0.0, relheight=1.0, relwidth=0.488)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#505fe2")
        self.Frame2.configure(highlightbackground="#6b75ed")
        self.Frame2.configure(highlightcolor="#646464646464")

        self.Label1 = tk.Label(self.Frame2)
        self.Label1.place(relx=0.028, rely=0.300, height=66, width=341)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#505fe2")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Lucida Fax} -size 13 -weight bold")
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Welcome to Scapattack Interface''')

        self.Message1 = tk.Message(self.Frame2)
        self.Message1.place(relx=0.138, rely=0.500, relheight=0.416
                , relwidth=0.707)
        self.Message1.configure(background="#505fe2")
        self.Message1.configure(font="-family {Lucida Fax} -size 8 -weight bold -slant italic")
        self.Message1.configure(foreground="#ffffff")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="#000000")
        self.Message1.configure(justify='center')
        self.Message1.configure(text='''The main objective is to manipulate Scapy, a tool that allows to build network packages with a Python API. This interface will allow you to configure the type of packet you want to generate and its main properties (addresses, data, etc.) to check with the help of Wireshark captures that the generated packets comply with the configuration.  
In a second time, this part has an importance on the security side, we will add to the graphical interface the possibility to play classical attacks.''')
        self.Message1.configure(width=256)
        
        
        img = Image.open("./Photos for Interface/site_logo (1).png")
        image1 = img.resize((200, 200), Image.ANTIALIAS)
        test = ImageTk.PhotoImage(img)
        label1 = tkinter.Label(image=test)
        label1.image = test
        label1.place(x=40, y=70)




        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.491, rely=0.021, height=76, width=341)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#ffffff")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Lucida Fax} -size 17 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Enter the details.''')


        self.TCombobox1Ptotocol = ttk.Combobox(self.Frame1)
        self.TCombobox1Ptotocol.place(relx=0.714, rely=0.231, relheight=0.053
                , relwidth=0.243)
        self.value_list = ['TCP','ICMP','UDP','DNS','FTP','SMTP','HTTP','Ethernet','Telnet',]
        self.TCombobox1Ptotocol.configure(values=self.value_list)
        self.TCombobox1Ptotocol.configure(textvariable=interfacetcl_support.combobox)
        self.TCombobox1Ptotocol.configure(takefocus="")
        self.TCombobox1Ptotocol.set('Please Select Your Protocol')

        #Hon lezim chouf ossit l selected b hayde lezim zabit l callback 
        # l mechekle
        #self.TCombobox1Ptotocol.bind('<<ComboboxSelected>>', callback)

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.491, rely=0.21, height=35, width=126)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor='sw')
        self.Label3.configure(background="#ffffff")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Lucida Fax} -size 9")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Protocol name :''')

        self.Label4 = tk.Label(self.Frame1)
        self.Label4.place(relx=0.491, rely=0.358, height=34, width=152)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(anchor='sw')
        self.Label4.configure(background="#ffffff")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(font="-family {Lucida Fax} -size 9")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Source IP address :''')

        self.sourcetextbox = tk.Entry(self.Frame1)
        self.sourcetextbox.place(relx=0.714, rely=0.379, height=23
                , relwidth=0.248)
        self.sourcetextbox.configure(background="white")
        self.sourcetextbox.configure(disabledforeground="#a3a3a3")
        self.sourcetextbox.configure(font="TkFixedFont")
        self.sourcetextbox.configure(foreground="#000000")
        self.sourcetextbox.configure(highlightbackground="#d9d9d9")
        self.sourcetextbox.configure(highlightcolor="black")
        self.sourcetextbox.configure(insertbackground="black")
        self.sourcetextbox.configure(selectbackground="blue")
        self.sourcetextbox.configure(selectforeground="white")
        #self.sourcetextbox.insert(0,"Please Enter Your IP@")


        self.Label5 = tk.Label(self.Frame1)
        self.Label5.place(relx=0.491, rely=0.527, height=23, width=178)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(anchor='nw')
        self.Label5.configure(background="#ffffff")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(font="-family {Lucida Fax} -size 9")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''Destination IP address :''')

        self.destinationtextbox = tk.Entry(self.Frame1)
        self.destinationtextbox.place(relx=0.714, rely=0.527, height=23
                , relwidth=0.248)
        self.destinationtextbox.configure(background="white")
        self.destinationtextbox.configure(disabledforeground="#a3a3a3")
        self.destinationtextbox.configure(font="TkFixedFont")
        self.destinationtextbox.configure(foreground="#000000")
        self.destinationtextbox.configure(highlightbackground="#d9d9d9")
        self.destinationtextbox.configure(highlightcolor="black")
        self.destinationtextbox.configure(insertbackground="black")
        self.destinationtextbox.configure(selectbackground="blue")
        self.destinationtextbox.configure(selectforeground="white")

        def generate_command():
            protocol = self.TCombobox1Ptotocol.selection_get()
            source = self.sourcetextbox.get()
            destination = self.destinationtextbox.get()
            PortNumber = self.Port_nbTextbox.get()
            print("The IP Source is:",source)
            print("The IP Destination is:",destination)
            print("The protocol name is:",protocol)
            print("The Port Number is:",PortNumber)
            print(check_ip(source))
            resultatsource = check_ip(source)
            resultatdestination = check_ip(destination)
            resultatPortNb = check_port(PortNumber)
            if resultatsource == False or resultatdestination == False or resultatPortNb == False:
                if resultatsource == False and resultatdestination == False and resultatPortNb == True:
                    messagebox.showerror("Error occurred","The value your entered for the source and the destination is not valid for an IP@, Please re-enter the valid value!")
                if resultatsource == False and resultatdestination == True and resultatPortNb == False:
                    messagebox.showerror("Error occurred","The value your entered for the source is not valid for an IP@, Please re-enter the valid value!")
                    messagebox.showerror("Error occurred","The value your entered for the port is not valid for a Port Number, Please re-enter the valid value!")
                if resultatsource == True and resultatdestination == False and resultatPortNb == False:
                    messagebox.showerror("Error occurred","The value your entered for the destination is not valid for an IP@, Please re-enter the valid value!")
                    messagebox.showerror("Error occurred","The value your entered for the port is not valid for a Port Number, Please re-enter the valid value!")
                if resultatsource == False and resultatdestination == True and resultatPortNb == True:
                    messagebox.showerror("Error occurred","The value your entered for the source is not valid for an IP@, Please re-enter the valid value!")
                if resultatsource == True and resultatdestination == True and resultatPortNb == False:
                    messagebox.showerror("Error occurred","The value your entered for the port is not valid for a Port Number, Please re-enter the valid value!")   
                if resultatsource == True and resultatdestination == False and resultatPortNb == True:
                    messagebox.showerror("Error occurred","The value your entered for the destination is not valid for an IP@, Please re-enter the valid value!") 
                if resultatsource == False and resultatdestination == False and resultatPortNb == False:
                    messagebox.showerror("Error occurred","The value your entered for the source and destination is not valid for an IP@ also the Port Number is not valid, Please re-enter the valid value!")
            else:
                if resultatsource == True or resultatdestination == True or resultatPortNb == True:
                    if protocol == "ICMP":
                        if PortNumber == "1":
                            send(IP(src=source, dst=destination) / ICMP())
                            messagebox.showinfo("Success!","Your Request Processed successfully. You can open wireshark in parallel to view the packets generated!")
                        else:
                            messagebox.showerror("Error occurred while generating the packet","The value your entered for the port is not a valid number for the protocol you choose, Please re-enter the valid value!") 
                    #elif protocol == "TCP":
                    #    if PortNumber == 
                    #    send(IP(src=source, dst=destination) / TCP())
                    #elif protocol == "UDP":
                    #    send(IP(src=source, dst=destination) / UDP())
                    elif protocol == "DNS":
                        # PortNumber = 53
                        dns_req = IP(src=source, dst=destination)/ UDP(dport=53)/DNS()
                        sr1(dns_req, verbose=0)
                        # print(answer[DNS].summary())

                        # send(IP(src=source, dst=destination) / DNS())
                        messagebox.showinfo("Success!","Your Request Processed successfully. You can open wireshark in parallel to view the packets generated!")
                    else:
                        print("Protocol not found")

                    #messagebox.showinfo("Success!","Your Request Processed successfully. You can open wireshark in parallel to view the packets generated!")
        

        def check_ip(IP):
            try:
                if socket.inet_aton(str(IP)):
                    return True
            except:
                return False
            
        def check_port(PortNumber):
            cond1 = PortNumber.isdigit()                # True/False
            cond2 = (1 <= int(PortNumber) <= 65535)     # True/False

            if cond1 and cond2:
                return True
                #print("This is a VALID port number.")
            else:
                return False
                #print("This is NOT a valid port number.")


        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.659, rely=0.654, height=44, width=127)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(command=interfacetcl_support.generate)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Generate''', command=generate_command)

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.518, rely=0.82, height=44, width=87)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(command=interfacetcl_support.open)
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(state='disabled')
        self.Button2.configure(text='''Open''')

        self.Button3 = tk.Button(self.Frame1)
        self.Button3.place(relx=0.84, rely=0.82, height=44, width=87)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(command=interfacetcl_support.submit)
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Submit''')

        self.Port_nbTextbox = tk.Entry(self.Frame1)
        self.Port_nbTextbox.place(relx=0.683, rely=0.785, height=30, relwidth=0.108)
        self.Port_nbTextbox.configure(background="white")
        self.Port_nbTextbox.configure(disabledbackground="#f0f0f0f0f0f0")
        self.Port_nbTextbox.configure(disabledforeground="#a3a3a3")
        self.Port_nbTextbox.configure(font="TkFixedFont")
        self.Port_nbTextbox.configure(foreground="#000000")
        self.Port_nbTextbox.configure(highlightbackground="#d9d9d9")
        self.Port_nbTextbox.configure(highlightcolor="black")
        self.Port_nbTextbox.configure(insertbackground="black")
        self.Port_nbTextbox.configure(selectbackground="blue")
        self.Port_nbTextbox.configure(selectforeground="white")

        self.Canvas1 = tk.Canvas(top)
        self.Canvas1.place(relx=0.075, rely=0.350, relheight=0.004
                , relwidth=0.131)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="blue")
        self.Canvas1.configure(selectforeground="white")

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

if __name__ == '__main__':
    vp_start_gui()






